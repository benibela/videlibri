//Classes to represent input elements of an HTML form

@SerializeJson
@Pascal->Kotlin
@PascalClass
class FormInput {
  name: String
  caption: String
  value: String
}

@SerializeJson
@Pascal->Kotlin
@PascalClass
class FormSelect: FormInput {
  optionCaptions: String[]
  optionValues: String[]
}

@SerializeJson
@Pascal->Kotlin
@PascalClass
class FormParams: FastInterfacedObject {
  inputs: FormInput[]
}

@Pascal->Kotlin
class VersionInfo {
  version: String
  platform: String
  buildId: String
}






//Classes to store user configuration options



@SerializeJson
@KotlinVar
@KotlinDataClass
@Pascal<->Kotlin
@PascalClass
class BookListDisplayOptions {
  showHistory: Boolean
  noBorrowedBookDetails: Boolean
  showRenewCount: Boolean = true
  groupingKey: String = "_dueWeek"
  sortingKey: String = "dueDate"
  filterKey: String
  alwaysFilterOnHistory: Boolean = true
}

@SerializeJson
@KotlinVar
@Pascal<->Kotlin
@PascalClass
class NotificationConfig {
  enabled: Boolean = true
  serviceDelay: Int = 15
  lastTime: Long
  lastTitle: String
  lastText: String
  lastAskedForPermission: Int
}

@SerializeJson
@KotlinVar
@Pascal<->Kotlin
@PascalClass
class OptionsAndroidOnly {
  logging: Boolean
  bookListDisplayOptions: BookListDisplayOptions
  filterHistory: String[]
  importExportFileName: String
  additionalCertificatesBase64: String[]
  notifications: NotificationConfig
  hasBeenStartedAtLeastOnce: Boolean
  accountCountBackup: Int = -1
}




@SerializeJson
@KotlinVar
@Pascal<->Kotlin
@PascalClass
class OptionsShared {
  nearTime: Int
  refreshInterval: Int
  userLibIds: String[]
}



@Pascal<->Kotlin
@PascalPrefix(eif)
enum ImportExportFlag {
  Current = 1
  History = 2
  Config = 4
  Password = 8
}


@Pascal<->Kotlin
@KotlinVar
class ImportExportData {
  accountsToImport: String[]
  flags: Int  
  //nativePtr is a very large object which must be destroyed with a call to  VLImportAccounts  
  nativePtr: Long
}




//Classes to represent metadata of a library


@Pascal<->Kotlin
@PascalPrefix(ti)
enum LibraryTestingInfo {
  Unknown
  Yes
  No
  Broken
}

@PascalClass
@Pascal<->Kotlin
class LibraryVariable {
  name: String
  value: String
}

@PascalClass
@Pascal<->Kotlin
@KotlinVar
class LibraryDetails {
  id: String
  prettyName: String
  prettyNameShort: String
  fhomepageUrl: String
  fcatalogueUrl: String
  fcatalogueUrlFromTemplate: String
  tableComment: String
  accountComment: String
  templateId: String
  variables: LibraryVariable[]
  segregatedAccounts: Boolean
  email: String
  testingSearch: LibraryTestingInfo
  testingAccount: LibraryTestingInfo
}

//Information about a supported library system

@Pascal->Kotlin
class TemplateDetails { 
  description: String
  variablesNames: String[]
  variablesDescription: String[]
  variablesDefault: String[]
}


//Book information

@Pascal<->Kotlin
@PascalPrefix(bs)
enum BookStatus {
  Unknown = 0
  Problematic = 5
  Normal = 6
  Ordered = 8
  Provided = 9
  Reserved = 10
  Available = 100
  Lend = 101
  Virtual = 102
  Presentation = 103
  InterLoan = 104
}

//Error handling
@Pascal<->Kotlin
@PascalPrefix(ek)
enum PendingExceptionKind{
  Unknown = 0
  Internet = 1
  Login = 2
}

@Pascal->Kotlin
class PendingException {
  kind: PendingExceptionKind
  accountPrettyNames: String
  error: String
  libraryIds: String
  searchQuery: String
  details: String
  anonymousDetails: String
  firstAccountUser: String
  firstAccountLib: String
}

@Pascal->Kotlin
class PendingExceptions {
  exceptions: PendingException[]
}



fun VLGetTemplateDetails(name: String): TemplateDetails
fun VLGetLibraryDetails(id: String, needCatalogUrl: Boolean): LibraryDetails
 
fun VLGetVersion(): VersionInfo
fun VLSetOptions(options: OptionsShared)
fun VLGetOptions(): OptionsShared
fun VLGetOptionsAndroidOnly(): OptionsAndroidOnly
fun VLSetOptionsAndroidOnly(options: OptionsAndroidOnly)


fun VLGetCoverURLs(ISBN: String, maxWidth: Int, maxHeight: Int ): String[]

fun VLTakePendingExceptions(): PendingExceptions
